
from typing import List, Dict, Annotated
from pydantic import BaseModel, Field
from typing_extensions import TypedDict
from langgraph.graph.message import add_messages
from langchain_core.messages import BaseMessage


class ReportModel(BaseModel):
    """Represents a report generated by the data-analysis agent."""
    task: str = Field(description="The task to be performed by the data-analysis agent.")
    code: str = Field(description="The code to be executed by the data-analysis agent that performs the requested task.")
    result: str = Field(description="The result of code execution.")


class AnalystSubgraphState(TypedDict):
    """State for the analyst agent."""
    messages: Annotated[list[BaseMessage], add_messages] = Field(default=[], description="The messages for the agent.")
    table_id: str = Field(description="The ID of the table being queried.")
    question: str = Field(description="The question asked by the user.")
    analysis_plan: str = Field(description="The rough analysis plan for the agent to follow.")
    context: str = Field(default=None, description="The context for the agent to use.")
    iters: int = Field(default=0, description="The number of iterations the agent has gone through.")
    report: List[ReportModel] = Field(default=[], description="The report generated by the agent.")


class RelevantTablesModel(BaseModel):
    """
    Model representing a relevant table for the analysis.
    """
    table_id: str = Field(description="The ID of the relevant table.")
    context: str = Field(description="The statistical data profile of the table.")
    analysis_plan: List[str] = Field(description="The low-level analysis plan for the table. Contains a list of steps.")


class ParentState(TypedDict):
    """State for the parent graph."""
    messages: Annotated[list[BaseMessage], add_messages] = Field(default=[], description="The messages for the parent graph.")
    question: str = Field(default=None, description="The question asked by the user.")
    iter: int = Field(default=0, description="The iteration count for the current state.")
    relevant_tables_metadata: List[RelevantTablesModel] = Field(default=[], description="List of relevant table IDs, their contexts, and analysis plans.")
    reports: Dict[str, List[ReportModel]] = Field(default={}, description="Dictionary mapping table IDs to their analysis reports.")